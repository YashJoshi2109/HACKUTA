"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var axios = require('axios');

var base64 = require('./base64');

var API_BASE = "https://api.facesoft.io";
var API_VERSION = "v1";

var Facesoft =
/*#__PURE__*/
function () {
  function Facesoft(apiKey) {
    _classCallCheck(this, Facesoft);

    this.apiKey = apiKey;
  }

  _createClass(Facesoft, [{
    key: "_get",
    value: function _get(endpoint, params) {
      var _this = this;

      return new Promise(function (resolve, reject) {
        var url = API_BASE + "/" + API_VERSION + "/" + endpoint;
        axios.get(url, {
          headers: {
            'Content-Type': 'application/json',
            'apikey': _this.apiKey
          },
          params: params
        }).then(function (response) {
          resolve(response.data);
        })["catch"](function (error) {
          reject(error.response.data);
        });
      });
    }
  }, {
    key: "_delete",
    value: function _delete(endpoint, params) {
      var _this2 = this;

      return new Promise(function (resolve, reject) {
        var url = API_BASE + "/" + API_VERSION + "/" + endpoint;
        axios["delete"](url, {
          headers: {
            'Content-Type': 'application/json',
            'apikey': _this2.apiKey
          },
          params: params
        }).then(function (response) {
          resolve(response.data);
        })["catch"](function (error) {
          reject(error.response.data);
        });
      });
    }
  }, {
    key: "_post",
    value: function _post(endpoint, payload) {
      var _this3 = this;

      var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return new Promise(function (resolve, reject) {
        var url = API_BASE + "/" + API_VERSION + "/" + endpoint;
        axios.post(url, JSON.stringify(payload), {
          headers: {
            'Content-Type': 'application/json',
            'apikey': _this3.apiKey
          },
          params: params
        }).then(function (response) {
          resolve(response.data);
        })["catch"](function (error) {
          reject(error.response.data);
        });
      });
    }
  }, {
    key: "detect",
    value: function detect(image1) {
      return this._post('face/detect', {
        image1: image1
      });
    }
  }, {
    key: "detectFromURL",
    value: function detectFromURL(url) {
      var _this4 = this;

      return base64.fromURL(url).then(function (response) {
        return _this4._post('face/detect', {
          image1: response
        });
      });
    }
  }, {
    key: "detectFromFile",
    value: function detectFromFile(filelocation) {
      return this._post('face/detect', {
        image1: base64.fromFile(filelocation)
      });
    }
  }, {
    key: "match",
    value: function match(image1, image2) {
      return this._post('face/match', {
        image1: image1,
        image2: image2
      });
    }
  }, {
    key: "matchFromURLs",
    value: function matchFromURLs(url1, url2) {
      var _this5 = this;

      return base64.fromURLs([url1, url2]).then(function (response) {
        return _this5._post('face/match', {
          image1: response[0],
          image2: response[1]
        });
      });
    }
  }, {
    key: "matchFromFiles",
    value: function matchFromFiles(filelocation1, filelocation2) {
      return this._post('face/match', {
        image1: base64.fromFile(filelocation1),
        image2: base64.fromFile(filelocation2)
      });
    }
  }, {
    key: "getTagInfo",
    value: function getTagInfo(tagID) {
      return this._get('face/tags', {
        tagID: tagID
      });
    }
  }, {
    key: "createTag",
    value: function createTag(tagID) {
      return this._post('face/tags', {
        tagID: tagID
      });
    }
  }, {
    key: "deleteTagWithImages",
    value: function deleteTagWithImages(tagID) {
      return this._delete('face/tags', {
        tagID: tagID
      });
    }
  }, {
    key: "recognizeTagByFace",
    value: function recognizeTagByFace(tagID) {
      return this._post('face/tags/find', {
        tagID: tagID
      });
    }
  }, {
    key: "associateImageWithTag",
    value: function associateImageWithTag(tagID, image1) {
      return this._post('face/tags/images', {
        tagID: tagID,
        image1: image1
      });
    }
  }, {
    key: "deleteImage",
    value: function deleteImage(imageID) {
      return this._delete('face/tags/images', {
        imageID: imageID
      });
    }
  }, {
    key: "validateImageWithTag",
    value: function validateImageWithTag(tagID, image1) {
      return this._post('face/tags/validate', {
        tagID: tagID,
        image1: image1
      });
    }
  }]);

  return Facesoft;
}();

module.exports = Facesoft;