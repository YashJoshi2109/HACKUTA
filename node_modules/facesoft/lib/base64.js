"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fromURLs = exports.fromURL = exports.fromFile = void 0;

var fs = require('fs');

var axios = require('axios');

var fromFile = function fromFile(file) {
  var body = fs.readFileSync(file);
  return body.toString('base64');
};

exports.fromFile = fromFile;

var fromURL = function fromURL(url) {
  return new Promise(function (resolve, reject) {
    axios.get(url, {
      responseType: 'arraybuffer'
    }).then(function (response) {
      var type = response.headers["content-type"];
      if (!type.includes("image")) reject(new Error('URL is not an image'));
      resolve(Buffer.from(response.data, 'binary').toString('base64'));
    })["catch"](function (error) {
      reject(error.response);
    });
  });
};

exports.fromURL = fromURL;

var fromURLs = function fromURLs(urls) {
  return new Promise(function (resolve, reject) {
    axios.all([axios.get(urls[0], {
      responseType: 'arraybuffer'
    }), axios.get(urls[1], {
      responseType: 'arraybuffer'
    })]).then(axios.spread(function (res1, res2) {
      var type = res1.headers["content-type"];
      var type2 = res2.headers["content-type"];
      if (!type.includes("image") || !type2.includes("image")) reject(new Error('URL is not an image'));
      resolve([Buffer.from(res1.data, 'binary').toString('base64'), Buffer.from(res2.data, 'binary').toString('base64')]);
    }))["catch"](function (error) {
      reject(error.response);
    });
  });
};

exports.fromURLs = fromURLs;